{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Validación del modelo de predicción"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import copy\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import genextreme\n",
    "from matplotlib.colors import ListedColormap\n",
    "\n",
    "from sklearn import metrics\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn import tree\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Our Functions:\n",
    "from ml_tools import getTruePositiveRate\n",
    "from ml_tools import getFalsePositiveRate\n",
    "from ml_tools import thresholdingAUC\n",
    "from ml_tools import getMSE\n",
    "from ml_tools import getTSE\n",
    "from ml_tools import getR2\n",
    "\n",
    "\n",
    "# Load the Dataset:\n",
    "\n",
    "iris = load_iris()\n",
    "\n",
    "X = iris['data']\n",
    "X = X[:,:2] # Usamos ancho y largo de la planta\n",
    "Y = (iris['target'] == 2) #[setosa, versicolor, **virginica**]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Validación Cruzada\n",
    "\n",
    "Estimar parámetros de un modelo en una base de datos y testear su poder predictivo con los mismos datos es un error en Machine Learning. Replicar la variable dependiente de la muestras que nuestro modelo acaba de usar tendría una puntuación perfecta por definición si es que tratamos de máximizar metricas de performace como el R2, AUC u otros. Este modelo muy probablemente tendría un problema de 'sobre-ajuste' y no podría predecir nada fuera de la muestra. \n",
    "\n",
    "Para evitar el sobre-ajuste se realizan los siguientes pasos: \n",
    "\n",
    "1. Dividir la muestra total en dos secciones, data de entrenamiento X_train, y_train y data de testeo X_test, y_test. \n",
    "2. Estimar los parámetros del modelo en base a la data de entrenamiento.\n",
    "3. Validar métricas de performance en base a data de testeo.\n",
    "4. Realizar los pasos del 1 al 3 con diferences muestras aleatorias de entrenamiento y testeo.\n",
    "5. Estimar el promedio y desviación estándar de las métricas de performance obtenidas.\n",
    "\n",
    "\n",
    "<img src=\"cross_validation.png\" alt=\"Drawing\" style=\"width: 600px;\">\n",
    "\n",
    "Fuente: https://scikit-learn.org/stable/modules/cross_validation.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separamos dataset en data de entrenamiento y prueba:\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definimos la funcion a utilizar y estimamos el modelo \n",
    "clf = LogisticRegression(random_state=0).fit(X_train[:,:2], Y_train) # Definir el problema"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predecimos la probabilidad en la data de entrenamiento y la data de testeo:\n",
    "logitPredictionScoreTrain = clf.predict_proba(X_train)[:,1]\n",
    "logitPredictionScoreTest = clf.predict_proba(X_test)[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Prediction in sample\n",
    "tprListLogisticTrain,fprListLogisticTrain =  thresholdingAUC(Y_train,logitPredictionScoreTrain)\n",
    "AUC1 = metrics.auc(fprListLogisticTrain, tprListLogisticTrain)\n",
    "\n",
    "#Prediction out of sample\n",
    "tprListLogisticTest,fprListLogisticTest =  thresholdingAUC(Y_test,logitPredictionScoreTest)\n",
    "AUC2 = metrics.auc(fprListLogisticTest, tprListLogisticTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Ploteamos el area bajo la curva in sample y out sample:\n",
    "plt.plot(fprListLogisticTest, tprListLogisticTest,  label='ROC curve Logit Test (area = %0.2f)' % AUC2)\n",
    "plt.plot(fprListLogisticTrain, tprListLogisticTrain,  label='ROC curve Logit Train (area = %0.2f)' % AUC1)\n",
    "plt.plot(fprListLogisticTest, fprListLogisticTest, linestyle='--')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver operating characteristic example')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pipelineCV(X, Y, clf, seed=0):\n",
    "    \n",
    "    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=seed)\n",
    "    clf.fit(X_train[:,:2], Y_train) # Definir el problem\n",
    "\n",
    "    # Predecimos la probabilidad en la data de entrenamiento y la data de testeo:\n",
    "    logitPredictionScoreTrain = clf.predict_proba(X_train)[:,1]\n",
    "    logitPredictionScoreTest = clf.predict_proba(X_test)[:,1]\n",
    "\n",
    "    #Prediction in sample\n",
    "    tprListLogisticTrain,fprListLogisticTrain =  thresholdingAUC(Y_train,logitPredictionScoreTrain)\n",
    "    aucTrain = metrics.auc(fprListLogisticTrain, tprListLogisticTrain)\n",
    "\n",
    "    #Prediction out of sample\n",
    "    tprListLogisticTest,fprListLogisticTest =  thresholdingAUC(Y_test,logitPredictionScoreTest)\n",
    "    aucTest = metrics.auc(fprListLogisticTest, tprListLogisticTest)    \n",
    "    \n",
    "    return aucTrain, aucTest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Data AUC: 0.8845081561713478 0.016942216384292316\n",
      "Test Data AUC: 0.8293829692086767 0.04935138418789077\n"
     ]
    }
   ],
   "source": [
    "clf = LogisticRegression(random_state=0)\n",
    "\n",
    "seedList = np.random.randint(1,10000,10)\n",
    "\n",
    "aucTrainList = []\n",
    "aucTestList = []\n",
    "\n",
    "for seed in seedList:\n",
    "    \n",
    "    aucTrain, aucTest = pipelineCV(X, Y, clf, seed)\n",
    "    aucTrainList.append(aucTrain)\n",
    "    aucTestList.append(aucTest)\n",
    "\n",
    "\n",
    "print('Train Data AUC:', np.mean(aucTrainList), np.std(aucTrainList))\n",
    "print('Test Data AUC:', np.mean(aucTestList), np.std(aucTestList))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Grid Search\n",
    "\n",
    "El grid search es una busqueda exhaustiva del modelo que mejor optimiza una o un conjunto de métricas de performance (por ejemplo AUC, R2, MSE) sujeto a valores de hyper-parámetros especificados en una grilla para uno o múltiples estimadores. \n",
    "\n",
    "Formalmente, siguiendo esta lógica, podríamos pensar en el Grid Search como un método de optimización en el cual escogemos los parámetros $\\beta^* = \\beta(\\Omega, \\alpha)$, los hyper parametros $\\alpha^* = \\alpha(\\Omega)$, y la estructura del modelo $\\Omega$ que optimizan la métrica de performance en la data de testeo $\\Delta_{test}$.\n",
    "\n",
    "Modelo de predicción:\n",
    "\n",
    "\\begin{align}\n",
    "y^*_{train} & = g(\\beta^*,\\alpha^*, \\Omega | X_{train}) \\\\\n",
    "\\end{align}\n",
    "\n",
    "La métrica de performance:\n",
    "\n",
    "\\begin{align}\n",
    "\\Delta & = \\Delta(y_{test}, y^*_{test}) \\\\\n",
    "\\end{align}\n",
    "\n",
    "El problema de optimización:\n",
    "\n",
    "\\begin{align}\n",
    "\\beta^*,\\alpha^*, \\Omega = arg max_{\\{\\beta^*,\\alpha^*, \\Omega\\}} \\{ \\Delta (\\beta^*,\\alpha^*, \\Omega, | X_{test}) \\} \\\\\n",
    "\\end{align}\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generamos una funcion que obtiene X, Y y el metodo ML que deseamos utililzar ademas de la semilla aleatoria que nos permite partir el dataset\n",
    "\n",
    "def getOutOfSampleAUC(X, Y, clf, seed=0):\n",
    "\n",
    "    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=seed)\n",
    "\n",
    "    clf = clf.fit(X_train[:,:2], Y_train) # Definir el problema\n",
    "    predictionScoreTrain = clf.predict_proba(X_train)[:,-1]\n",
    "    predictionScoreTest = clf.predict_proba(X_test)[:,-1]\n",
    "\n",
    "    #Prediction in sample\n",
    "    fprListTrain, tprListTrain,_ =  metrics.roc_curve(Y_train,predictionScoreTrain)\n",
    "    AUC_train = metrics.auc(fprListTrain, tprListTrain)\n",
    "\n",
    "    #Prediction out of sample\n",
    "    fprListTest, tprListTest,_ =  metrics.roc_curve(Y_test,predictionScoreTest)\n",
    "    AUC_test = metrics.auc(fprListTest, tprListTest)\n",
    "\n",
    "    return AUC_train, AUC_test\n",
    "\n",
    "\n",
    "# Cross validation:\n",
    "\n",
    "def getCrossValidation(X,Y,clf):\n",
    "\n",
    "    seedList = np.random.randint(1,1000,10)\n",
    "\n",
    "    AUC_train_list = []\n",
    "    AUC_test_list  = []\n",
    "    for seed in seedList:\n",
    "        AUC_train, AUC_test = getOutOfSampleAUC(X,Y,clf,seed)\n",
    "        AUC_train_list.append(AUC_train)\n",
    "        AUC_test_list.append(AUC_test)\n",
    "\n",
    "    AUC_Levels   = pd.DataFrame(pd.DataFrame({0:AUC_train_list,1:AUC_test_list}).unstack()).reset_index()\n",
    "    AUC_Levels['Estimator'] = clf.__class__.__name__\n",
    "\n",
    "    return AUC_Levels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "AUC_Levels = getCrossValidation(X,Y,clf)\n",
    "\n",
    "sns.barplot(x = 'level_0', y=0, data = AUC_Levels)\n",
    "plt.xlabel('Sub Sample')\n",
    "plt.ylabel('AUC Level')\n",
    "plt.ylim([.5,1])\n",
    "plt.title('AUC Cross Validation')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# Applying Grid Search\n",
    "modelList = [\n",
    "LogisticRegression(random_state=0),\n",
    "KNeighborsClassifier(5, weights='uniform'),\n",
    "tree.DecisionTreeClassifier(max_depth=2),\n",
    "RandomForestClassifier(max_depth=2, random_state=0)\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Grid Search:\n",
    "\n",
    "AUC_LevelsList= []\n",
    "for clf in modelList: AUC_LevelsList.append(getCrossValidation(X,Y,clf))\n",
    "\n",
    "AUC_Levels = pd.concat(AUC_LevelsList)\n",
    "\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.barplot(x = 'Estimator', y=0, hue='level_0', data = AUC_Levels)\n",
    "plt.xlabel('Model')\n",
    "plt.ylabel('AUC Level')\n",
    "plt.ylim([.5,1])\n",
    "plt.title('Grid Search')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
